{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"StreamController - The Linux app for the Elgato Stream Deck","text":"Background image by kvacm"},{"location":"#features","title":"Features","text":"<ul> <li>Plugin support</li> <li>Icon pack support</li> <li>Wallpaper pack support</li> <li>Multi deck support</li> <li>Background images &amp; videos</li> <li>Nice GTK4 interface</li> <li>Active maintenance</li> </ul>"},{"location":"#gallery","title":"Gallery","text":"Background images by kvacm"},{"location":"common_problems/","title":"Common Problems","text":""},{"location":"common_problems/#1-no-decks-found","title":"1. No decks found","text":"<p>When your system uses an older version of udev you might have to manually add some udev rules to your system.</p> Solution"},{"location":"common_problems/#1-conflicting-apps","title":"1. Conflicting apps","text":"<p>Make sure that no other app is accessing your decks (check the autostart as well).</p>"},{"location":"common_problems/#2-missing-udev-rules","title":"2. Missing udev rules","text":"<ol> <li>Run: <code>sudo wget https://raw.githubusercontent.com/StreamController/StreamController/main/udev.rules -O /etc/udev/rules.d/60-streamdeck.rules</code></li> <li>Restart your system: <code>reboot</code></li> </ol>"},{"location":"common_problems/#2-app-stops-if-main-window-gets-closed-widgets-freeze","title":"2. App stops if main window gets closed / Widgets freeze","text":"<p>This can happen if you're under Ubuntu because it might not allow StreamController to run in the background.</p> Solution <ol> <li>Open your system settings</li> <li>Navigate to Apps -&gt; StreamController</li> <li>Enable \"Run in background\" </li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#general","title":"General","text":""},{"location":"faq/#what-is-streamcontroller","title":"What is StreamController?","text":"<p>StreamController is the Linux alternative to the Windows/Mac Elgato Stream Deck Software.</p>"},{"location":"faq/#do-plugins-for-the-elgato-software-work-in-streamcontroller","title":"Do plugins for the Elgato Software work in StreamController?","text":"<p>Plugins for the official Elgato Stream Deck software do not work in StreamController, and we are not developing this feature at the moment. However, this may come in the future.</p>"},{"location":"faq/#what-does-official-stand-for-in-the-plugins","title":"What does \"official\" stand for in the plugins?","text":"<p>The official badge indicates an asset was created by the maintainer and lead dev, Core447. </p>"},{"location":"faq/#devices","title":"Devices","text":"<p>Currently, the following devices are supported:</p> <ul> <li>Stream Deck Original</li> <li>Stream Deck Original V2</li> <li>Stream Deck Mini</li> <li>Stream Deck XL</li> <li>Stream Deck Plus</li> </ul>"},{"location":"faq/#problems","title":"Problems","text":""},{"location":"faq/#i-have-a-problem-with-the-software-what-do-i-do","title":"I have a problem with the software, what do I do?","text":"<p>For software-related issues, you can either create an issue on Github or use the assigned Issues channel on Discord.</p>"},{"location":"faq/#plugin-x-doesnt-workhas-a-problem","title":"Plugin X doesn't work/has a problem","text":"<p>For plugin-related issues, you can either create an issue for the plugin on the plugin's Github or use the assigned Issues channel on Discord.</p>"},{"location":"faq/#getting-help","title":"Getting Help","text":"<p>You can open a discussion on Github or on the Discord.</p>"},{"location":"faq/#reporting-bugs","title":"Reporting Bugs","text":"<p>You can open an issue on Github or on Discord.</p>"},{"location":"faq/#how-can-i-create-my-own-plugin","title":"How can I create my own plugin?","text":"<p>Firstly, check if the plugin you want to create doesn't exist or is not being developed. If something already exists, you may be able to work with the developer of that plugin to make it better. If it doesn't exist, the Plugin Template and the Wiki are a great place to start.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#flatpak","title":"Flatpak","text":""},{"location":"installation/#github","title":"GitHub","text":"<ol> <li>Clone StreamController from GitHub by typing:     <pre><code>git clone https://github.com/Core447/StreamController\n</code></pre></li> <li>Enter the <code>StreamController</code> directory:     <pre><code>cd StreamController\n</code></pre></li> <li>Create a virtual environment:     <pre><code>python -m venv .venv\n</code></pre></li> <li>Activate the virtual environment:     <pre><code>source .venv/bin/activate\n</code></pre></li> <li> <p>Install pip requirements:     <pre><code>pip install -r requirements.txt\n</code></pre></p> <p>Note</p> <p>On Arch Linux (and possibly other distros) you may need to install the following system packages using the distribution specific package manager: <pre><code>xdg-desktop-portal xdg-desktop-portal-gtk libportal libportal-gtk4\n</code></pre></p> </li> <li> <p>Optional: Switch branches</p> <p>If you want to try out a specific branch, you can change the branch using: <pre><code>git checkout &lt;branch&gt;\n</code></pre></p> </li> <li> <p>Launch the app:     <pre><code>python3 main.py\n</code></pre></p> </li> </ol>"},{"location":"installation/#help","title":"Help","text":"<p>If you encounter any problems, please go through Common Problems. You can also open an issue on the StreamController GitHub repository or on the Discord.</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2024/01/27/hello-everyone/","title":"Hello everyone","text":"<p>Hello and welcome to my documentation about StreamController!</p>"},{"location":"plugin_dev/getting_started/","title":"Getting Started","text":"<p>To get the most out of StreamController you can easily create your own plugin.</p> <p>And the best of it is that there are just four major steps to get started with developing your own plugin:</p> <ol> <li>Come up with an idea</li> <li>Download StreamController's source code</li> <li>Copy the plugin template </li> <li>Modify the template</li> <li>Submit your plugin to the Store</li> </ol> <p>Ok, ok, that was probably a bit too quick, so let's take a closer look at the process in the next sections.</p>"},{"location":"plugin_dev/idea/","title":"1. The Idea","text":"<p>The first but hardest step. Your presence here suggests that you might already have a brilliant concept for a plugin percolating in your mind.</p> <p>If not, I encourage you to reflect on any challenges or reccurent tasks you encounter while using your computer. Consider what could be improved or streamlined within your workflow. These pain points often serve as the perfect springboard for innovative plugin ideas that not only benefit you but also have the potential to assist others with similar needs.</p> <p>You might also wannt to look at the Elgato Marketplace to see if there are any plugins you would like to see on StreamController.</p>"},{"location":"plugin_dev/idea/#suggestions","title":"Suggestions","text":"<p>If you really struggle to find an idea, here's my list of plugins I would really like to see:</p> <ul> <li> Clock</li> <li> Days until</li> <li> Discord integration</li> <li> Emoji board</li> <li> Gnome Calendar integration</li> <li> Gnome Window Control (move windows on Gnome)</li> <li> Simulate mouse movement and clicks</li> <li> Speedtest</li> <li> Weather</li> </ul> <p>Feel free to use any of these suggestions without giving any credit.</p>"},{"location":"plugin_dev/intro/","title":"Plugin Development","text":"<p>Understanding that no single application can cater to the unique needs and preferences of every individual, I've empowered users to tailor their experience by developing their own plugins. This customization ensures that the functionality of the application aligns perfectly with their requirements.</p> <p>StreamController features enhanced plugin support, enabling developers like you to easily create plugins using Python. The choice of Python as the core language for StreamController wasn't arbitrary; it was selected for its simplicity and ease of learning, making it an ideal choice for plugin development.</p>"},{"location":"plugin_dev/intro/#official-plugins","title":"Official Plugins","text":"<p>StreamController is complemented by a suite of official plugins designed to enhance your experience:</p> <ul> <li>Clocks - Adds a beautiful analog and digital clock</li> <li>Counter - Helps you keep track of numbers</li> <li>Deck Plugin - Controls your Stream Deck on a new level</li> <li>Media Plugin - Controls and monitor playing audio and video content</li> <li>OBS Plugin - Controls OBS</li> <li>OS Plugin - Controls your OS</li> <li>PrusaLinkStatus - Shows the status of Prusa Link</li> <li>Requests - Sends HTTP requests</li> <li>Speedtest - Tests your internet speed</li> <li>VolumeMixer - Controls the volume of individual apps</li> <li>Weather - Shows the current weather</li> </ul>"},{"location":"plugin_dev/intro/#no-stream-deck","title":"No Stream Deck?","text":"<p>No problem, just use a FakeDeck!</p> <p>FakeDecks are emulated original Stream Decks for testing purposes, allowing you to test and develop plugins without any physical Stream Decks.</p>"},{"location":"plugin_dev/intro/#enable-fakedecks","title":"Enable FakeDecks","text":"<ol> <li>Open Settings</li> <li>Go to Developer Settings</li> <li>Increase the number of FakeDecks (max 3)</li> </ol>"},{"location":"plugin_dev/intro/#need-help","title":"Need Help?","text":"<p>Feel free to contact me via Mail or Discord.</p>"},{"location":"plugin_dev/setup/","title":"2. Setting Up Your Environment","text":"<p>After you have come up with an idea, all you have to do is put it into practice.   To develop StreamController plugins you need the source code of StreamController itself. This allows you to deeply integrate your plugin into the application.</p> <p>Note</p> <p>Should your plugin require modification of the code of StreamController, you will need to open a pull request. Just make sure that all requested changes outside of your plugin are generic ones and not specific to your plugin.</p>"},{"location":"plugin_dev/setup/#1-clone-streamcontroller","title":"1. Clone StreamController:","text":"<p>Clone StreamController from GitHub by typing:</p> <pre><code>git clone https://github.com/StreamController/StreamController\n</code></pre>"},{"location":"plugin_dev/setup/#2-enter-the-streamcontroller-directory","title":"2. Enter the <code>StreamController</code> directory:","text":"<pre><code>cd StreamController\n</code></pre>"},{"location":"plugin_dev/setup/#3-create-a-virtual-environment","title":"3. Create a virtual environment:","text":"<pre><code>python -m venv .venv\n</code></pre>"},{"location":"plugin_dev/setup/#4-activate-the-virtual-environment","title":"4. Activate the virtual environment:","text":"<pre><code>source .venv/bin/activate\n</code></pre>"},{"location":"plugin_dev/setup/#5-install-pip-requirements","title":"5. Install pip requirements:","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"plugin_dev/setup/#6-change-the-data-path","title":"6. Change the data path","text":"<p>StreamController normally stores data in the <code>.var/app/com.core447.StreamController/data</code> directory. However, for development it is useful to change the path to a directory inside the cloned repository. I recommend using creating a <code>data</code> directory in the root of the repository.</p> <p>Create the directory: <pre><code>mkdir -p data\n</code></pre></p> <p>You can then use the the <code>--data</code> argument to override the data path on launch. For example: <code>--data data</code>. Depending on your IDE you can also add this to your project configuration.</p> <p>Note</p> <p>If you have installed StreamController for your personal use as a Flatpak, this will not affect the data path of your Flatpak.</p>"},{"location":"plugin_dev/setup/#6-enter-the-plugins-directory","title":"6 Enter the plugins directory:","text":"<pre><code>cd data/plugins\n</code></pre>"},{"location":"plugin_dev/setup/#7-create-a-plugin-repository-by-using-the-plugin-template","title":"7. Create a plugin repository by using the Plugin Template:","text":"<p>Head over to GitHub and click on the green <code>Use this template</code> button. Follow the instructions.</p> <p>The next step is to clone the newly created repository: <pre><code>git clone https://github.com/username/plugin-template\n</code></pre> This will create a new directory called <code>plugin-template</code> in the plugins directory with a bunch of files. But no worry, I will explain each of them in the next section.</p>"},{"location":"plugin_dev/setup/#8-rename-the-plugintemplate-directory","title":"8. Rename the <code>PluginTemplate</code> directory:","text":"<pre><code>mv PluginTemplate com_example_plugin\n</code></pre> <p>Note</p> <p>The plugin name should be in reverse domain notation, but with underscores instead of periods. For example, <code>com_example_plugin</code>. You have to use underscores because python cannot handle periods in file and directory names.</p>"},{"location":"plugin_dev/advanced_concepts/DeckController/","title":"DeckController","text":"<p>The DeckController is a high-level object that allows you to control Stream Decks. It builds on top of the Stream Deck class of the python-elgato-streamdeck library. It manages the backgrounds, videos, labels and gives plugins and StreamController itself a nice interface.</p> <p>Under normal conditions you should not need to use this object directly because all important methods are make available through the ActionBase. However, if you want to write an action with more deeply integration like for example changing the background, you will need to call methods on DeckController directly.</p>"},{"location":"plugin_dev/advanced_concepts/PageCaching/","title":"Page Caching","text":"<p>StreamController caches pages displayed by the deck. This improves performance while only using a bit more memory.</p> <p>As a plugin developer, the internal caching mechanism is handled for you, so there's no need for direct intervention. However, it's important to be aware of its existence to circumvent potential issues:</p>"},{"location":"plugin_dev/advanced_concepts/PageCaching/#1-current_state-variables","title":"1. <code>current_state</code> variables","text":"Problem: If you use <code>current_state</code> variables in your actions to avoid updating the key image if it is not needed, congrats you're writing nice code.  Despite this, it's a common pitfall. Why? Because when a user navigates away from a page and then returns, your action's state might still be in the cache. Consequently, your plugin may falsely assume the correct image is displayed when, in fact, it is not. Solution: To address this, simply reset the <code>current_state</code> variable within the <code>on_ready</code> method. The <code>on_ready</code> method is invoked each time a page is loaded, allowing you to reset the <code>current_state</code> variable."},{"location":"plugin_dev/advanced_concepts/Signals/","title":"Signals","text":"<p>Signals are called when special actions are performed in the ui, allowing the plugin to respond to these actions. For example, should your plugin have some kind of page selection in the config area your plugin needs to get informed if a page gets renamed. That's exactly what signals are for.</p>"},{"location":"plugin_dev/advanced_concepts/Signals/#available-signals","title":"Available signals","text":""},{"location":"plugin_dev/advanced_concepts/Signals/#pagerename","title":"<code>PageRename</code>","text":"<p>Description: This signal is called whenever a page gets renamed in the <code>Page Manager</code>.</p> <p>Callback arguments:</p> Name Description Type old_path The old path of the page. str new_path The new path of the page. str"},{"location":"plugin_dev/advanced_concepts/Signals/#pagedelete","title":"<code>PageDelete</code>","text":"<p>Description: This signal is called whenever a page gets deleted in the <code>Page Manager</code>.</p> <p>Callback arguments:</p> Name Description Type path The path of removed the page. str"},{"location":"plugin_dev/advanced_concepts/Signals/#pageadd","title":"<code>PageAdd</code>","text":"<p>Description: This signal is called whenever a page gets added in the <code>Page Manager</code>.</p> <p>Callback arguments:</p> Name Description Type path The path of the added page. str"},{"location":"plugin_dev/advanced_concepts/Signals/#changepage","title":"<code>ChangePage</code>","text":"<p>Description: This signal is called whenever a page gets changed in the <code>Page Manager</code>.</p> <p>Callback arguments:</p> Name Description Type controller The controller of deck where the page was changed. DeckController old_path The old path of the page. str new_path The new path of the page. str"},{"location":"plugin_dev/advanced_concepts/Signals/#plugininstall","title":"<code>PluginInstall</code>","text":"<p>Description: This signal is called whenever a new plugin gets installed.</p> <p>Callback arguments:</p> Name Description Type id The id of the plugin e.g. <code>dev_core447_OSPlugin</code> str"},{"location":"plugin_dev/advanced_concepts/Signals/#how-to-use-signals","title":"How to use signals","text":"<ol> <li>Import the signals module <pre><code>from src.Signals import Signals\n</code></pre></li> <li>Connect to the signal This is done by the <code>connect</code> method of the <code>ActionBase</code>: <pre><code>self.connect(signal=Signals.PageRename, callback=self.on_page_rename)\n</code></pre></li> <li>Done !! Now every time a page gets renamed the <code>on_page_rename</code> method will be called.</li> </ol>"},{"location":"plugin_dev/advanced_concepts/Signals/#not-enough","title":"Not enough?","text":"<p>Should you need a signal that is currently not availble feel free to open a issue or work on an own pull request.</p>"},{"location":"plugin_dev/bases/ActionBase_py/","title":"ActionBase.py","text":"<p>The ActionBase is the base for all actions in StreamController. Therefore all your actions must extend this class. ActionBase gives you easy access to the key(s) controlled by your actions and providing easy wrappers to change images, set labels and getting events.</p> <p>If you want to learn more by going throught the code click here.</p>"},{"location":"plugin_dev/bases/ActionBase_py/#available-methods","title":"Available methods","text":""},{"location":"plugin_dev/bases/ActionBase_py/#set_deck_controller","title":"<code>set_deck_controller</code>","text":"<p>Arguments:</p> Argument Default Description deck_controller None The deck controller of the action. <p>Description:</p> <p>Warning</p> <p>This is an internal method, do not call it manually unless you know what you are doing.</p> <p>This method gets called on the initialization of the action and sets the internal variable <code>deck_controller</code>.</p>"},{"location":"plugin_dev/bases/ActionBase_py/#set_page","title":"<code>set_page</code>","text":"<p>Arguments:</p> Argument Default Description page None The page of the action. <p>Description:</p> <p>Warning</p> <p>This is an internal method, do not call it manually unless you know what you are doing.</p> <p>This method gets called on the initialization of the action and sets the internal variable <code>page</code>.</p>"},{"location":"plugin_dev/bases/ActionBase_py/#set_coords","title":"<code>set_coords</code>","text":"<p>Arguments:</p> Argument Default Description coords None The coords of the action <p>Description:</p> <p>Warning</p> <p>This is an internal method, do not call it manually unless you know what you are doing.</p> <p>This method gets called on the initialization of the action and sets the internal variable <code>coords</code>.</p>"},{"location":"plugin_dev/bases/ActionBase_py/#on_key_down","title":"<code>on_key_down</code>","text":"<p>This method gets called when the action key is pressed. You can override this method in your action and add your own code.</p> <p>Info</p> <p>To ensure a lag-free experience for the user, all actions on the pressed keys are executed in a dedicated thread. This means you can add time consuming code here without affecting the application. However, any actions on the button after that will be delayed to ensure that the actions are always called in the same order.</p>"},{"location":"plugin_dev/bases/ActionBase_py/#on_key_up","title":"<code>on_key_up</code>","text":"<p>This method gets called when the action key is released. You can override this method in your action and add your own code.</p> <p>Info</p> <p>To ensure a lag-free experience for the user, all actions on the released keys are executed in a dedicated thread. This means you can add time consuming code here without affecting the application. However, any actions on the button after that will be delayed to ensure that the actions are always called in the same order.</p>"},{"location":"plugin_dev/bases/ActionBase_py/#on_tick","title":"<code>on_tick</code>","text":"This method gets called every second to allow live updates to the key. You can override this method in your action and add your own code. <p>Info</p> unlike <code>on_key_down</code> and <code>on_key_up</code> all actions on the same deck will be executed in the same thread. This means you are not supposed to add time consuming code here. <p>Warning</p> The next tick loop will start one second after the last one finished. This means should there be some actions that take a bit longer to finish their ticks, the delays will grow. Therefore <code>on_tick</code> should neither be used for time consuming code nor for precize timing."},{"location":"plugin_dev/bases/ActionBase_py/#on_ready","title":"<code>on_ready</code>","text":"This method gets called after the app is fully loaded and the decks are ready to process all types of requests. <p>Info</p> The constructor of all actions gets called before the actual decks are ready to process any requests for image changes. For that reason you should use <code>on_ready</code> for the intial image change instead of relying on the constructor."},{"location":"plugin_dev/bases/ActionBase_py/#set_default_image","title":"<code>set_default_image</code>","text":"<p>Arguments:</p> Argument Default Description Type image None The image to use PIL.Image <p>Description: This sets the default image of the key. If the user or any other action tries to change the image their image will be used instead.</p> <p>Warning</p> <p>This is not implemented yet. Changes made through this method will be ignored.</p>"},{"location":"plugin_dev/bases/ActionBase_py/#set_default_label","title":"<code>set_default_label</code>","text":"<p>Arguments:</p> Argument Default Description Type text None The text to display str position bottom The position of the text relative to the key str color [255, 255, 255] The color of the text list[int] stroke_width 0 The stroke width of the text int font_family \"\" The font family of the text str font_size 18 The font size of the text int <p>Description: This sets the default label of the key. If the user or any other action tries to change the label their label will be used instead.</p> <p>Warning</p> <p>This is not implemented yet. Changes made through this method will be ignored.</p>"},{"location":"plugin_dev/bases/ActionBase_py/#set_media","title":"<code>set_media</code>","text":"<p>Arguments:</p> Argument Default Description Type image None The image to use PIL.Image.Image media_path None The path to a media file (can be a video, image or gif) str size 1 The size of the image float valign 0 The vertical alignment of the image (range -1 to 1) float halign 0 The horizontal alignment of the image (range -1 to 1) float loop True Whether to loop the video bool fps 30 The frames per second of the video int update True Whether to update the key bool <p>Description: This is the method you can use to change the content of the key. As you can see you can show images as well as videos in all major formats.</p>"},{"location":"plugin_dev/bases/ActionBase_py/#set_background_color","title":"<code>set_background_color</code>:","text":"<p>Arguments:</p> Argument Default Description Type color [255, 255, 255, 255] The color of the background list[int] update True Whether to update the key bool"},{"location":"plugin_dev/bases/ActionBase_py/#show_error","title":"<code>show_error</code>","text":"<p>Arguments:</p> Argument Default Description Type duration -1 The duration of the error in seconds. -1 means infinite float"},{"location":"plugin_dev/bases/ActionBase_py/#set_label","title":"<code>set_label</code>","text":"<p>Arguments:</p> Argument Default Description Type text None The text to display str position bottom One of the three available positions: <code>top</code>, <code>center</code> or <code>bottom</code> str color [255, 255, 255] The color of the text list[int] stroke_width 0 The stroke width of the text int font_family \"\" The font family of the text str font_size 18 The font size of the text int update True Whether to update the key bool <p>Description: This method allows you write text in one of the three available positions: <code>top</code>, <code>center</code> or <code>bottom</code> onto the key.</p>"},{"location":"plugin_dev/bases/ActionBase_py/#set_top_label","title":"<code>set_top_label</code>","text":"<p>Arguments:</p> Argument Default Description Type text None The text to display str color [255, 255, 255] The color of the text list[int] stroke_width 0 The stroke width of the text int font_family \"\" The font family of the text str font_size 18 The font size of the text int update True Whether to update the key bool <p>Description: This method has the same outcome as <code>set_label</code> with <code>position = \"top\"</code>.</p>"},{"location":"plugin_dev/bases/ActionBase_py/#set_center_label","title":"<code>set_center_label</code>","text":"<p>Arguments:</p> Argument Default Description Type text None The text to display str color [255, 255, 255] The color of the text list[int] stroke_width 0 The stroke width of the text int font_family \"\" The font family of the text str font_size 18 The font size of the text int update True Whether to update the key bool <p>Description: This method has the same outcome as <code>set_label</code> with <code>position = \"center\"</code>.</p>"},{"location":"plugin_dev/bases/ActionBase_py/#set_bottom_label","title":"<code>set_bottom_label</code>","text":"<p>Arguments:</p> Argument Default Description Type text None The text to display str color [255, 255, 255] The color of the text list[int] stroke_width 0 The stroke width of the text int font_family \"\" The font family of the text str font_size 18 The font size of the text int update True Whether to update the key bool <p>Description: This method has the same outcome as <code>set_label</code> with <code>position = \"bottom\"</code>.</p>"},{"location":"plugin_dev/bases/ActionBase_py/#get_config_rows","title":"<code>get_config_rows</code>","text":"<p>Description: This method can be overritten by your action to show configuration rows in the ui.  Example from the OS Plugin </p> <p>Returns: A list of Adw.PreferencesRow objects.</p> <p>Info</p> <p>If you need a brief intro into GTK4 in python you can check out this tutorial. For more involved information you can also check out the GTK4 documentation.</p>"},{"location":"plugin_dev/bases/ActionBase_py/#get_custom_config_area","title":"<code>get_custom_config_area</code>","text":"<p>Description: This method can be overritten by your action to show a custom area in the ui. By allowing all Gtk.Widgets you are able to customize the config area completely to your needs.</p> <p>Returns: Any Gtk.Widget</p> <p>Info</p> <p>If you need a brief intro into GTK4 in python you can check out this tutorial. For more involved information you can also check out the GTK4 documentation.</p>"},{"location":"plugin_dev/bases/ActionBase_py/#set_settings","title":"<code>set_settings</code>","text":"<p>Arguments:</p> Argument Description Type settings A dictionary with your settings dict <p>Description: This method allows you to store settings for your actions. The typical usage is to store the user settings made in the <code>custom config area</code>. You then use <code>get_settings</code> to retrieve them.</p> <p>The dict gets directly written into the page json and will be kept if the page gets exported or duplicated. This looks like this: <pre><code>\"actions\": [\n            {\n                \"name\": \"dev_core447_MediaPlugin::Info\",\n                \"settings\": {\n                    \"show_thumbnail\": true,\n                    \"show_label\": true,\n                    \"seperator_text\": \"\"\n                }\n            }\n        ]\n</code></pre></p>"},{"location":"plugin_dev/bases/ActionBase_py/#get_settings","title":"<code>get_settings</code>","text":"<p>Description: This method returns a dictionary with all your set settings for this action. For more see <code>set_settings</code>.</p> <p>Returns: A dictionary with your settings</p>"},{"location":"plugin_dev/bases/ActionBase_py/#connect","title":"<code>connect</code>","text":"<p>Arguments:</p> Argument Default Description Type signal None The signal to connect to Signal callback None A callback method callable <p>Description: This method allows you to connect to signals allowing you to adapt to important changes made through the ui. For example if you are working with page names you might want to connect to the page rename signal to get notified when that happens and change the internal references accordingly. How to use signals</p>"},{"location":"plugin_dev/bases/ActionBase_py/#launch_backend","title":"<code>launch_backend</code>","text":"<p>Description:</p> <p>Launches a local backend. See BackendBase.</p> <p>Warning</p> <p>The methods waits until the backend is registered.</p> <p>Arguments:</p> Argument Default Description Type backend_path None The path of the backend to launch. str venv_path None The path of the venv to use. str open_in_terminal False Open the backend in a terminal window. Useful for debugging. bool"},{"location":"plugin_dev/bases/ActionBase_py/#get_own_key","title":"<code>get_own_key</code>","text":"Description: Returns <code>ControllerKey</code> object holding this action."},{"location":"plugin_dev/bases/ActionBase_py/#get_is_multi_action","title":"<code>get_is_multi_action</code>","text":"Description: Returns <code>True</code> if this action is a multi action. If <code>True</code> all images operations should be disabled."},{"location":"plugin_dev/bases/ActionBase_py/#available-constants","title":"Available Constants","text":""},{"location":"plugin_dev/bases/ActionBase_py/#has_configuration","title":"<code>HAS_CONFIGURATION</code>","text":"Description: Can be set to <code>True</code> or <code>False</code> to make an Action open the Configuration Page after it got added to a button Default: <code>False</code>"},{"location":"plugin_dev/bases/BackendBase_py/","title":"BackendBase.py","text":"<p>Most actions don't need and use a dedicated backend. However, if you want to make heavy use of third party libraries or ones that interfere with the ones of the StreamController, you have to use a backend.</p> <p>A backend in StreamController is a independant process that gets started by StreamController. StreamController will connect the backend to your action(s).</p> <p>Running the backend in a dedicated process removes any limitations of the usable requirements.</p>"},{"location":"plugin_dev/bases/PluginBase_py/","title":"PluginBase.py","text":"<p>The PluginBase is the base for all plugins in StreamController.</p> <p>If you want to learn more by going throught the code click here.</p>"},{"location":"plugin_dev/bases/PluginBase_py/#available-methods","title":"Available methods","text":""},{"location":"plugin_dev/bases/PluginBase_py/#register","title":"<code>register</code>","text":"Description: Registers the plugin. <p>Arguments:</p> Argument Default Description Type plugin_name None The name of the plugin. (can be localized) str github_repo None The link to your github repository. str plugin_version None The version of the plugin. str app_version None The version of the app the plugin is compatible with. str"},{"location":"plugin_dev/bases/PluginBase_py/#do_versions_match","title":"<code>do_versions_match</code>","text":"Description: Checks if the version of the plugin and the app are compatible. <p>Info</p> This is an internal method and there should be no need to use it manually <p>Arguments:</p> Argument Default Description Type app_version_to_check None The version of the app to check. str"},{"location":"plugin_dev/bases/PluginBase_py/#add_action_holder","title":"<code>add_action_holder</code>","text":"Description: Adds an action holder to the plugin. <p>Arguments:</p> Argument Default Description Type action_holder None The action holder to add. ActionHolder"},{"location":"plugin_dev/bases/PluginBase_py/#set_settings","title":"<code>set_settings</code>","text":"<p>Description:</p> <p>This settings stores plugin specific settings under <code>plugin_dir/settings.json</code></p> <p>Arguments:</p> Argument Default Description Type settings None The settings to store. dict"},{"location":"plugin_dev/bases/PluginBase_py/#get_settings","title":"<code>get_settings</code>","text":"<p>Description:  </p> <p>This method returns a dictionary with all your set settings for this plugin. For more see <code>set_settings</code>.</p>"},{"location":"plugin_dev/bases/PluginBase_py/#add_css_stylesheet","title":"<code>add_css_stylesheet</code>","text":"<p>Description:</p> <p>Adds a css stylesheet to the plugin, allowing actions to further style their config areas.</p> <p>Warning</p> <p>The stylesheet will be loaded to the main StreamController window. Be careful to not override any existing styles. Therefore it is recomended to start all names with an unique prefix.</p> <p>Arguments:</p> Argument Default Description Type path None The path of the stylesheet to add. str"},{"location":"plugin_dev/bases/PluginBase_py/#register_page","title":"<code>register_page</code>","text":"<p>Description:</p> <p>Adds a page to StreamController.</p> <p>Arguments:</p> Argument Default Description Type path None The path of the page to add. str"},{"location":"plugin_dev/bases/PluginBase_py/#launch_backend","title":"<code>launch_backend</code>","text":"<p>Description:</p> <p>Launches a plugin wide backend. See BackendBase.</p> <p>Arguments:</p> Argument Default Description Type backend_path None The path of the backend to launch. str venv_path None The path of the venv to use. str open_in_terminal False Open the backend in a terminal window. Useful for debugging. bool"},{"location":"plugin_dev/bases/PluginBase_py/#get_selector_image","title":"<code>get_selector_image</code>","text":"<p>Description:</p> <p>Returns the icon used for the plugin selector in the ui.</p>"},{"location":"plugin_dev/bases/PluginBase_py/#on_uninstall","title":"<code>on_uninstall</code>","text":"<p>Description:</p> <p>Disconnects and stops own backend if launched.</p>"},{"location":"plugin_dev/modify_template/AddCounter/","title":"Add A Counter Action","text":""},{"location":"plugin_dev/modify_template/AddCounter/#1-add-a-new-directory","title":"1. Add a new directory","text":"<p>Every action should be located in it's dedicated subdirectory of <code>actions</code>. <pre><code>mkdir /path_to_plugin/actions/counter\n</code></pre> This will create a new folder <code>counter</code> in the <code>actions</code> directory. Feel free to change the name or path as long as it's in the plugin's dir.</p>"},{"location":"plugin_dev/modify_template/AddCounter/#2-create-a-new-file-for-the-action","title":"2. Create a new file for the action","text":"<p><pre><code>touch /path_to_plugin/actions/counter/counter.py\n</code></pre> This creates an empty file <code>counter.py</code> in the new folder. In the next steps we'll add the content to the file.</p>"},{"location":"plugin_dev/modify_template/AddCounter/#3-programming-the-new-action","title":"3. Programming the new action","text":"<p>Now let's add the actual action to the <code>counter.py</code> file.</p> counter.py<pre><code># Import StreamController modules\nfrom src.backend.PluginManager.ActionBase import ActionBase\nfrom src.backend.DeckManagement.DeckController import DeckController\nfrom src.backend.PageManagement.Page import Page\nfrom src.backend.PluginManager.PluginBase import PluginBase\n\nclass Counter(ActionBase):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n</code></pre> <p>That's it, at least for now. You just created a basic action without any functionality. However, this would not be shown it the ui yet.</p>"},{"location":"plugin_dev/modify_template/AddCounter/#4-register-the-action","title":"4. Register the action","text":"<p>All actions of a plugin have to be registered in the plugin's plugin base, here in main.py. <code>main.py</code> currently looks like this: main.py<pre><code># Import StreamController modules\nfrom src.backend.PluginManager.PluginBase import PluginBase\nfrom src.backend.PluginManager.ActionHolder import ActionHolder\n\n# Import actions\nfrom .actions.SimpleAction.SimpleAction import SimpleAction\n\nclass PluginTemplate(PluginBase):\n    def __init__(self):\n        super().__init__()\n\n        ## Register actions\n        self.simple_action_holder = ActionHolder(\n            plugin_base = self,\n            action_base = SimpleAction,\n            action_id = \"dev_core447_Template::SimpleAction\", # Change this to your own plugin id\n            action_name = \"Simple Action\",\n        )\n        self.add_action_holder(self.simple_action_holder)\n\n        # Register plugin\n        self.register(\n            plugin_name = \"Template\",\n            github_repo = \"https://github.com/StreamController/PluginTemplate\",\n            plugin_version = \"1.0.0\",\n            app_version = \"1.1.1-alpha\"\n        )\n</code></pre> The good news is that you just have to add a couple of lines to make your new action available. The first step is to import the newly created action. To do so you can just add the following line below the import of <code>SimpleAction</code>: <pre><code>from .actions.counter.counter import Counter\n</code></pre> The only thing left to do is to register the action by creating an ActionHolder and adding it to the plugin: main.py<pre><code># Import StreamController modules\nfrom src.backend.PluginManager.PluginBase import PluginBase\nfrom src.backend.PluginManager.ActionHolder import ActionHolder\n\n# Import actions\nfrom .actions.SimpleAction.SimpleAction import SimpleAction\nfrom .actions.counter.counter import Counter\n\nclass PluginTemplate(PluginBase):\n    def __init__(self):\n        super().__init__()\n\n        ## Register actions\n        self.simple_action_holder = ActionHolder(\n            plugin_base = self,\n            action_base = SimpleAction,\n            action_id = \"dev_core447_Template::SimpleAction\", # Change this to your own plugin id\n            action_name = \"Simple Action\",\n        )\n        self.add_action_holder(self.simple_action_holder)\n\n        self.counter_action_holder = ActionHolder(\n            plugin_base = self,\n            action_base = Counter,\n            action_id = \"dev_core447_Template::Counter\", # Change this to your own plugin id\n            action_name = \"Counter\",\n        )\n        self.add_action_holder(self.counter_action_holder)\n\n        # Register plugin\n        self.register(\n            plugin_name = \"Template\",\n            github_repo = \"https://github.com/StreamController/PluginTemplate\",\n            plugin_version = \"1.0.0\",\n            app_version = \"1.1.1-alpha\"\n        )\n</code></pre></p> <p>Note</p> <p>The <code>action_id</code> must be unique and in the following format: {reverse-domain with underscores}::{action_name}</p>"},{"location":"plugin_dev/modify_template/AddCounter/#5-do-something","title":"5. Do something!!!","text":"<p>What is the point of an action that does nothing? None at all. But we're going to change that now. Let's change the action to cound the presses and show the number on the key. For that we have to modify <code>counter.py</code>: counter.py<pre><code># Import StreamController modules\nfrom src.backend.PluginManager.ActionBase import ActionBase\nfrom src.backend.DeckManagement.DeckController import DeckController\nfrom src.backend.PageManagement.Page import Page\nfrom src.backend.PluginManager.PluginBase import PluginBase\n\nclass Counter(ActionBase):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n</code></pre></p>"},{"location":"plugin_dev/modify_template/AddCounter/#1-the-first-thing-we-need-to-do-is-to-add-a-counter-variable","title":"1. The first thing we need to do is to add a counter variable:","text":"counter.py (partial)<pre><code>class Counter(ActionBase):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self.counter: int = 0\n</code></pre>"},{"location":"plugin_dev/modify_template/AddCounter/#2-now-we-need-to-increase-the-counter-if-the-action-key-gets-pressed","title":"2. Now we need to increase the counter if the action key gets pressed:","text":"counter.py (partial)<pre><code>class Counter(ActionBase):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self.counter: int = 0\n\n    def on_key_down(self):\n        self.counter += 1\n</code></pre>"},{"location":"plugin_dev/modify_template/AddCounter/#3-update-the-label-on-the-key-if-the-counter-changes","title":"3. Update the label on the key if the counter changes:","text":"counter.py (partial)<pre><code>class Counter(ActionBase):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self.counter: int = 0\n\n    def on_key_down(self):\n        self.counter += 1\n        self.set_center_label(str(self.counter))\n</code></pre>"},{"location":"plugin_dev/modify_template/AddCounter/#4-show-the-initial-counter-on-load-up","title":"4. Show the initial counter on load up:","text":"counter.py (partial)<pre><code>class Counter(ActionBase):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self.counter: int = 0\n\n    def on_ready(self):\n        self.set_center_label(str(self.counter))\n\n    def on_key_down(self):\n        self.counter += 1\n        self.set_center_label(str(self.counter))\n</code></pre>"},{"location":"plugin_dev/modify_template/AddCounter/#5-the-result","title":"5. The result","text":"<p>The final <code>counter.py</code> looks like this: counter.py<pre><code># Import StreamController modules\nfrom src.backend.PluginManager.ActionBase import ActionBase\nfrom src.backend.DeckManagement.DeckController import DeckController\nfrom src.backend.PageManagement.Page import Page\nfrom src.backend.PluginManager.PluginBase import PluginBase\n\nclass Counter(ActionBase):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self.counter: int = 0\n\n    def on_ready(self):\n        self.set_center_label(str(self.counter))\n\n    def on_key_down(self):\n        self.counter += 1\n        self.set_center_label(str(self.counter))\n</code></pre></p>"},{"location":"plugin_dev/modify_template/add_a_backend_action/","title":"Add A Backend Action","text":"<p>If you need to use many large libraries, you have to add a backend to your action.</p>"},{"location":"plugin_dev/modify_template/add_a_backend_action/#rpyc","title":"Rpyc","text":"<p>The backend of all actions is running in a completely separate python process. This means no normal communication between the backend and the actual action is possible. Here comes rpyc into play. It creates a communication channel between the action and the backend over the local network. If you want to know more about rpyc, you can read it's documentation.</p>"},{"location":"plugin_dev/modify_template/add_a_backend_action/#add-a-backend-to-your-action","title":"Add a backend to your action","text":"<p>In this example we'll go over how to add a basic backend to our CounterAction.</p> <p>Info</p> <p>In production it would not be necessary to write a backend for such a simple action that does not need any extra libraries, but for the sake of the example we'll add a basic backend anyway.</p>"},{"location":"plugin_dev/modify_template/add_a_backend_action/#1-add-a-new-directory","title":"1. Add a new directory","text":"<p>Every action backend should be located in it's dedicated subdirectory of <code>actions/action_name</code>. <pre><code>mkdir /path_to_plugin/actions/counter/backend\n</code></pre> This will create a new folder <code>backend</code> in the <code>actions/action_name</code> directory.</p>"},{"location":"plugin_dev/modify_template/add_a_backend_action/#2-create-a-new-file-for-the-backend","title":"2. Create a new file for the backend","text":"<p><pre><code>touch /path_to_plugin/actions/counter/backend/backend.py\n</code></pre> This creates an empty file <code>backend.py</code> in the new folder.</p>"},{"location":"plugin_dev/modify_template/add_a_backend_action/#3-programming-the-new-backend","title":"3. Programming the new backend","text":"<p>Now let's add the actual backend to the <code>backend.py</code> file. backend.py<pre><code>from streamcontroller_plugin_tools import BackendBase #(1)!\n\nclass Backend(BackendBase):\n    def __init__(self):\n        super().__init__()\n\nbackend = Backend() #(2)!\n</code></pre></p> <ol> <li>Import the BackendBase</li> <li>Create an instance of the class</li> </ol> <p>The backend will automatically connect to your action. This is possible because launch_backend starts <code>backend.py</code> with the rpyc port as an argument.</p>"},{"location":"plugin_dev/modify_template/add_a_backend_action/#4-add-counter-methods-to-the-backend","title":"4. Add counter methods to the backend","text":"<p>Now we can add methods to retrive the current number and increment it. backend.py<pre><code>from streamcontroller_plugin_tools import BackendBase\n\nclass Backend(BackendBase):\n    def __init__(self):\n        super().__init__()\n\n        self.counter: int = 0\n\n    def get_count(self) -&gt; int:\n        return self.counter\n\n    def increase_count(self) -&gt; None:\n        self.counter += 1\n\nbackend = Backend()\n</code></pre></p>"},{"location":"plugin_dev/modify_template/add_a_backend_action/#5-remove-old-counter-code-from-counter","title":"5. Remove old counter code from Counter","text":"<p>Now we can remove the old counter code from Counter because we will use the backend to manage the counter. This results into: counter.py<pre><code># Import StreamController modules\nfrom src.backend.PluginManager.ActionBase import ActionBase\nfrom src.backend.DeckManagement.DeckController import DeckController\nfrom src.backend.PageManagement.Page import Page\nfrom src.backend.PluginManager.PluginBase import PluginBase\n\nclass Counter(ActionBase):\n    def __init__(self, action_id: str, action_name: str,\n                 deck_controller: DeckController, page: Page, coords: str, plugin_base: PluginBase):\n        super().__init__(action_id=action_id, action_name=action_name,\n            deck_controller=deck_controller, page=page, coords=coords, plugin_base=plugin_base)\n\n    def on_ready(self):\n        pass\n\n    def on_key_down(self):\n        pass\n</code></pre></p>"},{"location":"plugin_dev/modify_template/add_a_backend_action/#6-launch-the-backend-from-the-action","title":"6. Launch the backend from the action","text":"<p>The next step is to launch the backend from the action. To do this, we will use the launch_backend method of the ActionBase. This method will start the backend with the rpyc port of the action as an argument. counter.py<pre><code># Import StreamController modules\nfrom src.backend.PluginManager.ActionBase import ActionBase\nfrom src.backend.DeckManagement.DeckController import DeckController\nfrom src.backend.PageManagement.Page import Page\nfrom src.backend.PluginManager.PluginBase import PluginBase\n\nimport os\n\nclass Counter(ActionBase):\n    def __init__(self, action_id: str, action_name: str,\n                 deck_controller: DeckController, page: Page, coords: str, plugin_base: PluginBase):\n        super().__init__(action_id=action_id, action_name=action_name,\n            deck_controller=deck_controller, page=page, coords=coords, plugin_base=plugin_base)\n\n        backend_path = os.path.join(self.plugin_base.PATH, \"actions\", \"counter\", \"backend\", \"backend.py\") #(1)!\n        self.launch_backend(backend_path=backend_path, open_in_terminal=True) #(2)!\n\n    def on_ready(self):\n        pass\n\n    def on_key_down(self):\n        pass\n</code></pre></p> <ol> <li>Construct the path to the backend</li> <li>Launch the backend</li> </ol> <p>The <code>open_in_terminal=True</code> statement will open a new terminal window for the backend. This is useful for debugging, but should not be used in production.</p>"},{"location":"plugin_dev/modify_template/add_a_backend_action/#7-test-the-backend","title":"7. Test the backend","text":"<p>To test the new backend, we will need to add a Counter action to the deck.</p> <p>You should now see a terminal window opening with your backend running.  If you encounter any problems feel free to open an issue on the StreamController GitHub repository and I will try to help you.</p>"},{"location":"plugin_dev/modify_template/add_a_backend_action/#8-use-the-backend","title":"8. Use the backend","text":"<p>Now that we have a backend, we can use it methods to manage the counter state. counter.py<pre><code># Import StreamController modules\nfrom src.backend.PluginManager.ActionBase import ActionBase\nfrom src.backend.DeckManagement.DeckController import DeckController\nfrom src.backend.PageManagement.Page import Page\nfrom src.backend.PluginManager.PluginBase import PluginBase\n\nimport os\n\nclass Counter(ActionBase):\n    def __init__(self, action_id: str, action_name: str,\n                 deck_controller: DeckController, page: Page, coords: str, plugin_base: PluginBase):\n        super().__init__(action_id=action_id, action_name=action_name,\n            deck_controller=deck_controller, page=page, coords=coords, plugin_base=plugin_base)\n\n        backend_path = os.path.join(self.plugin_base.PATH, \"actions\", \"counter\", \"backend\", \"backend.py\")\n        self.launch_backend(backend_path=backend_path, open_in_terminal=True)\n\n    def on_ready(self):\n        self.set_center_label(str(self.backend.get_count()))\n\n    def on_key_down(self):\n        self.backend.increase_count()\n        self.set_center_label(str(self.backend.get_count()))\n</code></pre></p>"},{"location":"plugin_dev/modify_template/add_a_backend_action/#9-add-error-handling","title":"9. Add error handling","text":"<p>With a new component in our plugin than might break or crash, it is always a good idea to inform the user about any errors that might occur. We can do this by using the show_error method of the ActionBase. counter.py<pre><code># Import StreamController modules\nfrom src.backend.PluginManager.ActionBase import ActionBase\nfrom src.backend.DeckManagement.DeckController import DeckController\nfrom src.backend.PageManagement.Page import Page\nfrom src.backend.PluginManager.PluginBase import PluginBase\n\nimport os\nfrom loguru import logger as log #(1)!\n\nclass Counter(ActionBase):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        backend_path = os.path.join(self.plugin_base.PATH, \"actions\", \"counter\", \"backend\", \"backend.py\")\n        self.launch_backend(backend_path=backend_path, open_in_terminal=True)\n\n    def on_ready(self):\n        try:\n            count = str(self.backend.get_count())\n        except Exception as e:\n            log.error(e)\n            self.show_error()\n            return\n\n        self.set_center_label(count)\n\n    def on_key_down(self):\n        try:\n            self.backend.increase_count()\n            count = str(self.backend.get_count())\n        except Exception as e:\n            log.error(e)\n            self.show_error()\n            return\n\n        self.set_center_label(count)\n</code></pre></p> <ol> <li>Import loguru - the logger of StreamController</li> </ol> <p>This code shows communication errors between the frontend and the backend on the deck. If you still have <code>open_in_terminal</code> set to <code>True</code>, you can easily test the code by closing the terminal window. This will lead to an error on the next key press.</p> <p>Try/Catch</p> <p>If you use try/except to catch such errors, it is important to log the errors in some sort to allow easy debugging.</p>"},{"location":"plugin_dev/modify_template/add_a_plugin_backend/","title":"Add A Plugin Backend","text":"<p>The last section was all about adding a backend to an individual action, whereas in reality if often makes more sense to have one backend for the entire plugin. The OBS plugin is an example of this.</p> <p>To learn more about how the communication works, check out the last section.</p>"},{"location":"plugin_dev/modify_template/add_a_plugin_backend/#add-a-backend-to-our-plugin","title":"Add a backend to our plugin","text":"<p>In this example we'll go over how to add a basic backend to our plugin, by moving the action backend of the last section to the plugin itself.</p>"},{"location":"plugin_dev/modify_template/add_a_plugin_backend/#1-add-a-new-directory","title":"1. Add a new directory","text":"<p>The backend should be seperated from the rest of the plugin. <pre><code>mkdir /path_to_plugin/backend\n</code></pre> This will create a new folder <code>backend</code> in the <code>plugin</code> directory.</p>"},{"location":"plugin_dev/modify_template/add_a_plugin_backend/#2-create-a-new-file-for-the-backend","title":"2. Create a new file for the backend","text":"<p><pre><code>touch /path_to_plugin/backend/backend.py\n</code></pre> This creates an empty file <code>backend.py</code> in the new folder.</p>"},{"location":"plugin_dev/modify_template/add_a_plugin_backend/#3-programming-the-backend","title":"3. Programming the backend","text":"<p>Now let's add the actual backend to the <code>backend.py</code> file.  We'll use the same as in the action backend. backend.py<pre><code>from streamcontroller_plugin_tools import BackendBase\n\nclass Backend(BackendBase):\n    def __init__(self):\n        super().__init__()\n\n        self.counter: int = 0\n\n    def get_count(self) -&gt; int:\n        return self.counter\n\n    def increase_count(self) -&gt; None:\n        self.counter += 1\n\nbackend = Backend()\n</code></pre></p> <p>Note</p> <p>As you can see there is no difference in the backend code between a plugin and an action backend.</p>"},{"location":"plugin_dev/modify_template/add_a_plugin_backend/#4-remove-backend-launch-from-the-counter-action","title":"4. Remove backend launch from the counter action","text":"<p>To do this remove the highlighted lines: counter.py<pre><code># Import StreamController modules\nfrom src.backend.PluginManager.ActionBase import ActionBase\nfrom src.backend.DeckManagement.DeckController import DeckController\nfrom src.backend.PageManagement.Page import Page\nfrom src.backend.PluginManager.PluginBase import PluginBase\n\nimport os\nfrom loguru import logger as log \n\nclass Counter(ActionBase):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        backend_path = os.path.join(self.plugin_base.PATH, \"actions\", \"counter\", \"backend\", \"backend.py\")\n        self.launch_backend(backend_path=backend_path, open_in_terminal=True)\n\n    def on_ready(self):\n        try:\n            count = str(self.backend.get_count())\n        except Exception as e:\n            log.error(e)\n            self.show_error()\n            return\n\n        self.set_center_label(count)\n\n    def on_key_down(self):\n        try:\n            self.backend.increase_count()\n            count = str(self.backend.get_count())\n        except Exception as e:\n            log.error(e)\n            self.show_error()\n            return\n\n        self.set_center_label(count)\n</code></pre></p>"},{"location":"plugin_dev/modify_template/add_a_plugin_backend/#5-launch-the-backend","title":"5. Launch the backend","text":"<p>Now we can launch the backend from within the plugin: main.py<pre><code># Import StreamController modules\nfrom src.backend.PluginManager.PluginBase import PluginBase\nfrom src.backend.PluginManager.ActionHolder import ActionHolder\n\n# Import actions\nfrom .actions.SimpleAction.SimpleAction import SimpleAction\nfrom .actions.counter.counter import Counter\n\nclass PluginTemplate(PluginBase):\n    def __init__(self):\n        super().__init__()\n\n        ## Launch backend\n        backend_path = os.path.join(self.PATH, \"backend\", \"backend.py\") \n        self.launch_backend(backend_path=backend_path, open_in_terminal=True) \n\n        ## Register actions\n        self.simple_action_holder = ActionHolder(\n            plugin_base = self,\n            action_base = SimpleAction,\n            action_id = \"dev_core447_Template::SimpleAction\", # Change this to your own plugin id\n            action_name = \"Simple Action\",\n        )\n        self.add_action_holder(self.simple_action_holder)\n\n        self.counter_action_holder = ActionHolder(\n            plugin_base = self,\n            action_base = Counter,\n            action_id = \"dev_core447_Template::Counter\", # Change this to your own plugin id\n            action_name = \"Counter\",\n        )\n        self.add_action_holder(self.counter_action_holder)\n\n        # Register plugin\n        self.register(\n            plugin_name = \"Template\",\n            github_repo = \"https://github.com/StreamController/PluginTemplate\",\n            plugin_version = \"1.0.0\",\n            app_version = \"1.1.1-alpha\"\n        )\n</code></pre></p>"},{"location":"plugin_dev/modify_template/add_a_plugin_backend/#6-use-the-backend","title":"6. Use the backend","text":"<p>Now we can modify <code>counter.py</code> to use the new plugin backend: counter.py<pre><code># Import StreamController modules\nfrom src.backend.PluginManager.ActionBase import ActionBase\nfrom src.backend.DeckManagement.DeckController import DeckController\nfrom src.backend.PageManagement.Page import Page\nfrom src.backend.PluginManager.PluginBase import PluginBase\n\nimport os\nfrom loguru import logger as log \n\nclass Counter(ActionBase):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def on_ready(self):\n        try:\n            count = str(self.plugin_base.backend.get_count())\n        except Exception as e:\n            log.error(e)\n            self.show_error()\n            return\n\n        self.set_center_label(count)\n\n    def on_key_down(self):\n        try:\n            self.plugin_base.backend.increase_count()\n            count = str(self.plugin_base.backend.get_count())\n        except Exception as e:\n            log.error(e)\n            self.show_error()\n            return\n\n        self.set_center_label(count)\n</code></pre></p>"},{"location":"plugin_dev/modify_template/add_requirements/","title":"Add Requirements","text":"<p>At some point the libraries used by StreamController will not suffice for more complex plugins and actions. You'll need to add your own dependencies. This can be done by adding a <code>requirements.txt</code> file to root directory of your plugin.</p> <p>Warning</p> <p>This method is only meant to be used for small libraries that are needed in the frontend and do not interfere with the ones of the StreamController. If you need to use larger libraries, you will need to create a backend for your plugin or action. See Add a backend action to learn more.</p>"},{"location":"plugin_dev/modify_template/add_requirements/#requirements-with-backends","title":"Requirements with backends","text":"<p>If you use a backend (see Add A Backend Action) you're able to create a own environment for it.</p> <p>This is done by adding a <code>__install__.py</code> script to the root of your plugin. This will be run when the plugin is installed from the store.</p> <p>__install__.py<pre><code>from streamcontroller_plugin_tools.installation_helpers import create_venv\nfrom os.path import join, abspath, dirname\n\ntoplevel = dirname(abspath(__file__))\ncreate_venv(join(toplevel, \"backend\", \".venv\"), join(toplevel, \"backend\", \"requirements.txt\"))\n</code></pre> The shown file will create a new <code>backend/.venv</code> folder and install all requirements from <code>backend/requirements.txt</code></p>"},{"location":"plugin_dev/modify_template/localization/","title":"Localization","text":"<p>The Adw.SpinRow added in Add Config Rows has an English title and subtitle. This is fine for English users, but for other languages the title and subtitle are not localized. This is why plugins should use StreamControllers LocaleManager.</p> <p>LocaleManager chooses the right localized string based on the language the user is using.</p> <p>The LocaleManager of your plugin can be reached with <code>self.locale_manager</code> in the <code>PluginBase</code> and with <code>self.plugin_base.locale_manager</code> in your <code>Actions</code>.</p> <p>Info</p> <p>Each plugin must be available in English.</p>"},{"location":"plugin_dev/modify_template/localization/#1-how-to-localize","title":"1. How to localize","text":"<ul> <li>Locals are placed in the <code>locales</code> subfolder of your plugin (you might have to create it if it doesn't exist) and in the format of <code>json</code> files.</li> <li>The json cannot contain keys containing a new dictionary. This is valid: <pre><code>{\n    \"plugin.name\": \"Name\"\n}\n</code></pre> This isn't: <pre><code>{\n    \"plugin\": {\n        \"name\": \"Name\"\n    }\n}\n</code></pre></li> <li>The values can be retrieved with <code>self.locale_manager.get(\"key\")</code></li> </ul>"},{"location":"plugin_dev/modify_template/localization/#2-localize-the-plugin","title":"2. Localize the plugin","text":"<p>In this example we will localize the counter action in this state.</p>"},{"location":"plugin_dev/modify_template/localization/#21-localize-the-pluginbase","title":"2.1 Localize the PluginBase","text":""},{"location":"plugin_dev/modify_template/localization/#add-a-language-file","title":"Add a language file","text":"<p>Create a new <code>locales</code> subfolder in your plugin by typing: <pre><code>mkdir locales\n</code></pre> Add a new <code>en_US.json</code> file to the <code>locales</code> subfolder by typing: <pre><code>touch locales/en_US.json\n</code></pre> Add the needed language keys: <pre><code>{\n    \"plugin.name\": \"Template\",\n    \"actions.simple.name\": \"Simple Action\",\n    \"actions.counter.name\": \"Counter\",\n}\n</code></pre></p>"},{"location":"plugin_dev/modify_template/localization/#use-the-language-file","title":"Use the language file","text":"main.py<pre><code># Import StreamController modules\nfrom src.backend.PluginManager.PluginBase import PluginBase\nfrom src.backend.PluginManager.ActionHolder import ActionHolder\n\n# Import actions\nfrom .actions.SimpleAction.SimpleAction import SimpleAction\nfrom .actions.counter.counter import Counter\n\nclass PluginTemplate(PluginBase):\n    def __init__(self):\n        super().__init__()\n\n        self.lm = self.locale_manager #(1)!\n\n        ## Register actions\n        self.simple_action_holder = ActionHolder(\n            plugin_base = self,\n            action_base = SimpleAction,\n            action_id = \"dev_core447_Template::SimpleAction\", # Change this to your own plugin id\n            action_name = self.lm.get(\"actions.simple.name\")\n        )\n        self.add_action_holder(self.simple_action_holder)\n\n        self.counter_action_holder = ActionHolder(\n            plugin_base = self,\n            action_base = Counter,\n            action_id = \"dev_core447_Template::Counter\", # Change this to your own plugin id\n            action_name = self.lm.get(\"actions.counter.name\")\n        )\n        self.add_action_holder(self.counter_action_holder)\n\n        # Register plugin\n        self.register(\n            plugin_name = self.lm.get(\"plugin.name\"),\n            github_repo = \"https://github.com/StreamController/PluginTemplate\",\n            plugin_version = \"1.0.0\",\n            app_version = \"1.1.1-alpha\"\n        )\n</code></pre> <ol> <li>Make the LocaleManager available under a shorter name</li> </ol> <p>Warning</p> <p>Do not localize the <code>action_ids</code>. This will result in disabled action if the user switches to another language. Only localize visible strings.</p>"},{"location":"plugin_dev/modify_template/localization/#22-localize-the-counter","title":"2.2 Localize the counter","text":"<p>Extend <code>en_US.json</code> by the following keys: <pre><code>{\n    \"actions.counter.spinner.title\": \"Increment by\",\n    \"actions.counter.spinner.subtitle\": \"How much to increment the counter by\"\n}\n</code></pre> Now we have to modify <code>counter.py</code> in order to use the new keys: counter.py<pre><code># Import StreamController modules\nfrom src.backend.PluginManager.ActionBase import ActionBase\nfrom src.backend.DeckManagement.DeckController import DeckController\nfrom src.backend.PageManagement.Page import Page\nfrom src.backend.PluginManager.PluginBase import PluginBase\n\n# Import gtk\nimport gi\ngi.require_version(\"Gtk\", \"4.0\")\ngi.require_version(\"Adw\", \"1\")\nfrom gi.repository import Gtk, Adw\n\nclass Counter(ActionBase):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self.counter: int = 0\n\n    def on_ready(self):\n        self.set_center_label(str(self.counter))\n\n    def on_key_down(self):\n        settings = self.get_settings()\n        self.counter += settings.get(\"increment_by\", 1)\n        self.set_center_label(str(self.counter))\n\n    def get_config_rows(self) -&gt; list:\n        self.spinner = Adw.SpinRow.new_with_range(1, 100, 1)\n        self.spinner.set_title(self.plugin_base.lm.get(\"actions.counter.spinner.title\"))\n        self.spinner.set_subtitle(self.plugin_base.lm.get(\"actions.counter.spinner.subtitle\"))\n\n        self.load_config_values()\n\n        self.spinner.connect(\"changed\", self.on_spinner_value_changed)\n\n        return [self.spinner]\n\n    def load_config_values(self):\n        settings = self.get_settings()\n        self.spinner.set_value(settings.get(\"increment_by\", 1))\n\n    def on_spinner_value_changed(self, spinner):\n        settings = self.get_settings()\n        settings[\"increment_by\"] = int(spinner.get_value())\n        self.set_settings(settings)\n</code></pre></p>"},{"location":"plugin_dev/modify_template/overview/","title":"Overview","text":"<p>In this section I want to go through several exapmles of modifying the template.</p> <ol> <li>Add a counter action</li> </ol> <p>Let's get started getting your hand dirty!!!</p>"},{"location":"plugin_dev/modify_template/config/add_config_rows/","title":"Add Config Rows","text":"<p>This example will go over how to add a config row to the Counter action.</p> <p>We will use the Adw.SpinRow to control the increment of the counter.</p>"},{"location":"plugin_dev/modify_template/config/add_config_rows/#1-setup","title":"1. Setup","text":"<p>Warning</p> <p>This example is for the Counter action without any backends but you can easily adapt it to your needs.</p> <p>The <code>counter.py</code> looks like this: counter.py<pre><code># Import StreamController modules\nfrom src.backend.PluginManager.ActionBase import ActionBase\nfrom src.backend.DeckManagement.DeckController import DeckController\nfrom src.backend.PageManagement.Page import Page\nfrom src.backend.PluginManager.PluginBase import PluginBase\n\nclass Counter(ActionBase):\n    def __init__(self, action_id: str, action_name: str,\n                 deck_controller: DeckController, page: Page, coords: str, plugin_base: PluginBase):\n        super().__init__(action_id=action_id, action_name=action_name,\n            deck_controller=deck_controller, page=page, coords=coords, plugin_base=plugin_base)\n\n        self.counter: int = 0\n\n    def on_ready(self):\n        self.set_center_label(str(self.counter))\n\n    def on_key_down(self):\n        self.counter += 1\n        self.set_center_label(str(self.counter))\n</code></pre></p>"},{"location":"plugin_dev/modify_template/config/add_config_rows/#2-add-the-row","title":"2. Add the row","text":"<p>You can add config rows by overwiding the <code>get_config_rows</code> method. counter.py<pre><code># Import StreamController modules\nfrom src.backend.PluginManager.ActionBase import ActionBase\nfrom src.backend.DeckManagement.DeckController import DeckController\nfrom src.backend.PageManagement.Page import Page\nfrom src.backend.PluginManager.PluginBase import PluginBase\n\n# Import gtk\nimport gi\ngi.require_version(\"Gtk\", \"4.0\")\ngi.require_version(\"Adw\", \"1\")\nfrom gi.repository import Gtk, Adw #(1)!\n\nclass Counter(ActionBase):\n    def __init__(self, action_id: str, action_name: str,\n                 deck_controller: DeckController, page: Page, coords: str, plugin_base: PluginBase):\n        super().__init__(action_id=action_id, action_name=action_name,\n            deck_controller=deck_controller, page=page, coords=coords, plugin_base=plugin_base)\n\n        self.counter: int = 0\n\n    def on_ready(self):\n        self.set_center_label(str(self.counter))\n\n    def on_key_down(self):\n        self.counter += 1\n        self.set_center_label(str(self.counter))\n\n    def get_config_rows(self) -&gt; list:\n        self.spinner = Adw.SpinRow.new_with_range(1, 100, 1) #(2)!\n\n        return [self.spinner] #(3)\n</code></pre></p> <ol> <li>Import Gtk and Adw</li> <li>Create the Adw.SpinRow</li> <li>Return the list of rows</li> </ol>"},{"location":"plugin_dev/modify_template/config/add_config_rows/#3-test-appearance-of-the-row","title":"3. Test appearance of the row","text":"<p>The config area of the action should now look like this: </p> <p>As you can see the spinner is now visible in the config area, but it looks weird without a proper title.</p>"},{"location":"plugin_dev/modify_template/config/add_config_rows/#4-add-a-title","title":"4. Add a title","text":"<p>You can add a title to the Adw.SpinRow by using the <code>set_title</code> method. It is also recommended to add a subtitle as well by using <code>set_subtitle</code>.</p> <p>counter.py<pre><code># Import StreamController modules\nfrom src.backend.PluginManager.ActionBase import ActionBase\nfrom src.backend.DeckManagement.DeckController import DeckController\nfrom src.backend.PageManagement.Page import Page\nfrom src.backend.PluginManager.PluginBase import PluginBase\n\n# Import gtk\nimport gi\ngi.require_version(\"Gtk\", \"4.0\")\ngi.require_version(\"Adw\", \"1\")\nfrom gi.repository import Gtk, Adw\n\nclass Counter(ActionBase):\n    def __init__(self, action_id: str, action_name: str,\n                 deck_controller: DeckController, page: Page, coords: str, plugin_base: PluginBase):\n        super().__init__(action_id=action_id, action_name=action_name,\n            deck_controller=deck_controller, page=page, coords=coords, plugin_base=plugin_base)\n\n        self.counter: int = 0\n\n    def on_ready(self):\n        self.set_center_label(str(self.counter))\n\n    def on_key_down(self):\n        self.counter += 1\n        self.set_center_label(str(self.counter))\n\n    def get_config_rows(self) -&gt; list:\n        self.spinner = Adw.SpinRow.new_with_range(1, 100, 1)\n        self.spinner.set_title(\"Increment by\")\n        self.spinner.set_subtitle(\"How much to increment the counter by\")\n\n        return [self.spinner]\n</code></pre> The row will now look like this: </p>"},{"location":"plugin_dev/modify_template/config/add_config_rows/#5-store-the-value-of-the-spinner","title":"5. Store the value of the spinner","text":"<p>The spinner is worthless if don't store, restore and use the set value of the counter.</p> <p>To store the value we have to connect to it's <code>changed</code> signal: counter.py (partial)<pre><code>    def get_config_rows(self) -&gt; list:\n        self.spinner = Adw.SpinRow.new_with_range(1, 100, 1)\n        self.spinner.set_title(\"Increment by\")\n        self.spinner.set_subtitle(\"How much to increment the counter by\")\n\n        self.spinner.connect(\"changed\", self.on_spinner_value_changed) #(1)!\n\n        return [self.spinner]\n\n    def on_spinner_value_changed(self, spinner):\n        settings = self.get_settings() #(2)\n        settings[\"increment_by\"] = int(spinner.get_value()) #(3)\n        self.set_settings(settings) #(4)\n</code></pre></p> <ol> <li>Connect the <code>changed</code> signal</li> <li>Get the settings via <code>get_settings()</code></li> <li>Set the value of the spinner</li> <li>Set the new settings via <code>set_settings()</code></li> </ol>"},{"location":"plugin_dev/modify_template/config/add_config_rows/#6-restore-the-value-after-reload","title":"6. Restore the value after reload","text":"<p>If you leave the action area and re-enter it, the value will be reset to 1. To change this we have to retrive the stored value and set it to the spinner: counter.py (partial)<pre><code>def get_config_rows(self) -&gt; list:\n    self.spinner = Adw.SpinRow.new_with_range(1, 100, 1)\n    self.spinner.set_title(\"Increment by\")\n    self.spinner.set_subtitle(\"How much to increment the counter by\")\n\n    self.load_config_values()\n\n    self.spinner.connect(\"changed\", self.on_spinner_value_changed)\n\n    return [self.spinner]\n\ndef load_config_values(self):\n    settings = self.get_settings()\n    self.spinner.set_value(settings.get(\"increment_by\", 1))\n\ndef on_spinner_value_changed(self, spinner):\n    settings = self.get_settings()\n    settings[\"increment_by\"] = int(spinner.get_value())\n    self.set_settings(settings)\n</code></pre></p> <p>Warning</p> <p>Always load the settings before connecting any signals. Otherwise the signals will trigger when you set the new value(s).</p>"},{"location":"plugin_dev/modify_template/config/add_config_rows/#7-use-the-value","title":"7. Use the value","text":"<p>Now the spinner will be saved on changed and reloaded if necessary, but we are not doing anything with the value, yet. Let's change that: counter.py (partial)<pre><code>def on_key_down(self):\n    settings = self.get_settings()\n    self.counter += int(settings.get(\"increment_by\", 1))\n    self.set_center_label(str(self.counter))\n</code></pre></p> <p>Warning</p> <p>It is not possible to use <code>self.spinner.get_value()</code> instead of <code>self.get_settings()</code> because the spinner will only exist in memory if the configurator has been loaded for the action.</p>"},{"location":"plugin_dev/modify_template/config/add_config_rows/#8-the-result","title":"8. The result","text":"<p>The full <code>counter.py</code> looks like this: counter.py<pre><code># Import StreamController modules\nfrom src.backend.PluginManager.ActionBase import ActionBase\nfrom src.backend.DeckManagement.DeckController import DeckController\nfrom src.backend.PageManagement.Page import Page\nfrom src.backend.PluginManager.PluginBase import PluginBase\n\n# Import gtk\nimport gi\ngi.require_version(\"Gtk\", \"4.0\")\ngi.require_version(\"Adw\", \"1\")\nfrom gi.repository import Gtk, Adw\n\nclass Counter(ActionBase):\n    def __init__(self, action_id: str, action_name: str,\n                 deck_controller: DeckController, page: Page, coords: str, plugin_base: PluginBase):\n        super().__init__(action_id=action_id, action_name=action_name,\n            deck_controller=deck_controller, page=page, coords=coords, plugin_base=plugin_base)\n\n        self.counter: int = 0\n\n    def on_ready(self):\n        self.set_center_label(str(self.counter))\n\n    def on_key_down(self):\n        settings = self.get_settings()\n        self.counter += settings.get(\"increment_by\", 1)\n        self.set_center_label(str(self.counter))\n\n    def get_config_rows(self) -&gt; list:\n        self.spinner = Adw.SpinRow.new_with_range(1, 100, 1)\n        self.spinner.set_title(\"Increment by\")\n        self.spinner.set_subtitle(\"How much to increment the counter by\")\n\n        self.load_config_values()\n\n        self.spinner.connect(\"changed\", self.on_spinner_value_changed)\n\n        return [self.spinner]\n\n    def load_config_values(self):\n        settings = self.get_settings()\n        self.spinner.set_value(settings.get(\"increment_by\", 1))\n\n    def on_spinner_value_changed(self, spinner):\n        settings = self.get_settings()\n        settings[\"increment_by\"] = int(spinner.get_value())\n        self.set_settings(settings)\n</code></pre></p>"},{"location":"plugin_dev/modify_template/config/gtk_intro/","title":"Intro To Gtk","text":"<p>StreamController allows plugins to inject GTK widgets into the action configuration area for configuration of the actions.</p>"},{"location":"plugin_dev/modify_template/config/gtk_intro/#gtk","title":"GTK","text":"<p>GTK is a cross-platform GUI toolkit for creating graphical user interfaces. It is a free and open-source toolkit for developing applications with a focus on high quality and customization.</p>"},{"location":"plugin_dev/modify_template/config/gtk_intro/#getting-started","title":"Getting Started","text":"<p>Good resources to get started with GTK in python:</p> <ul> <li>GTK4 Python Tutorial by Taiko2k</li> <li>GTK4 Docs</li> </ul> <p>Info</p> <p>If you feel overwhelmed by GTK I have good news for you:</p> <ol> <li>You don't need to know much about GTK to add config rows to your actions.</li> <li>You can check out other plugins to see how they implemented config rows.</li> <li>Feel free to ask any questions on the StreamController Discord</li> </ol>"},{"location":"plugin_dev/modify_template/config/gtk_intro/#action-configuration-area","title":"Action Configuration Area","text":"The configuration area is splitted into two parts:"},{"location":"plugin_dev/modify_template/config/gtk_intro/#custom-config-rows-marked-blue","title":"Custom config rows (marked blue)","text":"Here plugins can add Adw.PreferencesRow widgets. See <code>get_config_rows</code> for more information about the implementation."},{"location":"plugin_dev/modify_template/config/gtk_intro/#custom-config-area-marked-green","title":"Custom config area (marked green)","text":"<p>Here plugins can add any Gtk.Widgets widgets allowing more options for customization but also requiring more work. See <code>get_custom_config_area</code> for more information about the implementation.</p>"},{"location":"plugin_dev/modify_template/config/stubs/","title":"Stubs","text":"<p>Unfortunately PyGObject does not provide autocomplete.</p>"},{"location":"plugin_dev/modify_template/config/stubs/#pygobject","title":"PyGObject","text":"<p>The easist way to add autocomplete is to install the pygobject-stubs package in your environment.</p>"},{"location":"plugin_dev/plugin_template/SimpleAction_py/","title":"SimpleAction.py","text":"SimpleAction.py<pre><code># Import StreamController modules\nfrom src.backend.PluginManager.ActionBase import ActionBase #(1)!\nfrom src.backend.DeckManagement.DeckController import DeckController #(2)!\nfrom src.backend.PageManagement.Page import Page #(3)!\nfrom src.backend.PluginManager.PluginBase import PluginBase #(4)!\n\n# Import python modules\nimport os\n\n# Import gtk modules - used for the config rows\nimport gi\ngi.require_version(\"Gtk\", \"4.0\") #(5)!\ngi.require_version(\"Adw\", \"1\") #(6)!\nfrom gi.repository import Gtk, Adw #(7)!\n\nclass SimpleAction(ActionBase):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def on_ready(self) -&gt; None:\n        icon_path = os.path.join(self.plugin_base.PATH, \"assets\", \"info.png\")\n        self.set_media(media_path=icon_path, size=0.75) #(8)!\n\n    def on_key_down(self) -&gt; None:\n        print(\"Key down\") #(9)!\n\n    def on_key_up(self) -&gt; None:\n        print(\"Key up\") #(10)!\n</code></pre> <ol> <li>Import the ActionBase class</li> <li>Import the DeckController class - just used for typing</li> <li>Import the Page class - just used for typing</li> <li>Import the PluginBase class - just used for typing</li> <li>Set the GTK version to 4.0</li> <li>Set the Adw version to 1</li> <li>Import GTK and Adw</li> <li>Set an icon for the action</li> <li>Print \"Key down\" if the key is pressed</li> <li>Print \"Key up\" if the key is released</li> </ol>"},{"location":"plugin_dev/plugin_template/attribution_json/","title":"attribution.json","text":"<p>The attribution.json file is used to provide attribution to third party assets used in your plugin, e.g. fonts, images, etc.</p> <p>Per default the file looks like this: attribution.json<pre><code>{\n    \"generic\": {\n        \"copyright\": \"\",\n        \"original-url\": \"\",\n        \"license\": \"\",\n        \"license-url\": \"\",\n        \"description\": \"\"\n    }\n}\n</code></pre></p> <p>You can add files you want to give credit to by adding their relative path as a new key. This might look like this: attribution.json<pre><code>{\n    \"generic\": {\n        \"copyright\": \"\",\n        \"original-url\": \"\",\n        \"license\": \"\",\n        \"license-url\": \"\",\n        \"description\": \"\"\n    },\n    \"path/to/file\": {\n        \"copyright\": \"\",\n        \"original-url\": \"\",\n        \"license\": \"\",\n        \"license-url\": \"\",\n        \"description\": \"\"\n    }\n}\n</code></pre></p> <p>The shown <code>generic</code> controls the default and therefore sets the values for all not otherwise specified files.</p>"},{"location":"plugin_dev/plugin_template/attribution_json/#description-of-the-keys","title":"Description of the keys","text":"Key Description copyright The copyright holder of the file. original-url The original url of the file. license The license of the file, e.g. <code>MIT</code> license-url The url of the license, e.g. <code>https://opensource.org/licenses/MIT</code> description Describe any changes or additions made to the file."},{"location":"plugin_dev/plugin_template/main_py/","title":"main.py","text":"<p>The main.py is the main file of your plugin and will be executed when the plugin is loaded. Therefore this is the place where you can add your actions to your plugin.</p> <p>Per default the file looks like this: main.py<pre><code># Import StreamController modules\nfrom src.backend.PluginManager.PluginBase import PluginBase #(1)!\nfrom src.backend.PluginManager.ActionHolder import ActionHolder #(2)!\n\n# Import actions\nfrom .actions.SimpleAction.SimpleAction import SimpleAction #(3)!\n\nclass PluginTemplate(PluginBase):\n    def __init__(self):\n        super().__init__()\n\n        ## Register actions\n        self.simple_action_holder = ActionHolder( #(4)!\n            plugin_base = self,\n            action_base = SimpleAction,\n            action_id = \"dev_core447_Template::SimpleAction\", # Change this to your own plugin id\n            action_name = \"Simple Action\",\n        )\n        self.add_action_holder(self.simple_action_holder) #(5)!\n\n        # Register plugin\n        self.register(\n            plugin_name = \"Template\",\n            github_repo = \"https://github.com/StreamController/PluginTemplate\",\n            plugin_version = \"1.0.0\",\n            app_version = \"1.1.1-alpha\"\n        ) #(5)!\n</code></pre></p> <ol> <li>Import the PluginBase class which is the base for all plugins.</li> <li>Import the <code>ActionHolder</code> class which holds [ActionBases] until creation.</li> <li>Import the SimpleAction which is a sample action with no backend.</li> <li>Create a new ActionHolder class for the [SimpleAction] action.</li> <li>Add the ActionHolder to the plugin.</li> <li>Register the plugin.</li> </ol>"},{"location":"plugin_dev/plugin_template/main_py/#lets-go-over-the-code","title":"Let's go over the code:","text":""},{"location":"plugin_dev/plugin_template/main_py/#import-streamcontroller-modules","title":"Import StreamController modules","text":"<p><pre><code>from src.backend.PluginManager.PluginBase import PluginBase\n</code></pre> imports the PluginBase which is the base class for all plugins.</p> <p><pre><code>from src.backend.PluginManager.ActionHolder import ActionHolder\n</code></pre> imports the ActionHolder which holds [ActionBases] until creation.</p>"},{"location":"plugin_dev/plugin_template/main_py/#import-actions","title":"Import actions","text":"<p><pre><code>from .actions.SimpleAction.SimpleAction import SimpleAction\n</code></pre> imports the SimpleAction. This is the sample action with no backend.</p>"},{"location":"plugin_dev/plugin_template/main_py/#the-plugin-class","title":"The plugin class","text":"<p><pre><code>self.simple_action_holder = ActionHolder(\n            plugin_base = self,\n            action_base = SimpleAction,\n            action_id = \"dev_core447_Template::SimpleAction\", # Change this to your own plugin id\n            action_name = \"Simple Action\",\n        )\n</code></pre> creates an ActionHolder for the [SimpleAction] action.</p> <p><pre><code>self.add_action_holder(self.simple_action_holder)\n</code></pre> adds the ActionHolder to the plugin.</p> <p><pre><code>self.register(\n            plugin_name = \"Template\",\n            github_repo = \"https://github.com/StreamController/PluginTemplate\",\n            plugin_version = \"1.0.0\",\n            app_version = \"1.1.1-alpha\"\n        )\n</code></pre> registers the plugin. See register.</p>"},{"location":"plugin_dev/plugin_template/manifest_json/","title":"manifest.json","text":"<p>The manifest.json file contains information about the plugin.</p> <p>Per default the file looks like this: manifest.json<pre><code>{\n  \"version\": \"\",\n  \"thumbnail\": \"\",\n  \"id\": \"\",\n  \"name\": \"\", \n  \"app-version\": \"\",\n  \"author\": \"\",\n  \"github\": \"\"\n}\n</code></pre></p> <p>As you can see there are seven keys you can set. Those fields are mandatory and need to be included in every Plugin</p> Name Description version The version of your plugin. This has currently no effect at all. thumbnail The path to the thumbnail you want to show in the store. This is really important. id The unique id of your plugin in reverse domain name notation. Because Python has problems if the name contains dots, you must replace them with underscores. name The name of your plugin. This will only be shown in the store. app-version The current app version the Plugin uses author The creator of the Plugin github The link to the Plugin repository <p>The next 4 keys are optional and dont need to be included in the manifest. Adding them to the manifest would look like this:</p> manifest.json<pre><code>{\n  \"app-version\": \"\",\n  \"descriptions\": {\n    \"en_US\": \"\"\n  },\n  \"short-descriptions\": {\n    \"en_US\": \"\"\n  },\n  \"tags\": [\"\",\"\",\"\"],\n  \"minimum-app-version\": \"\"\n}\n</code></pre> Name Description descriptions Contains all the Descriptions that can be shown in the Store by using the Locales short-descriptions Contains all the Descriptions that can be shown in the Preview in the Store by using the Locales tags Can be used to Filter for Plugins minimum-app-version Specifies a minimum app version the User needs to be running on for the Plugin to function correctly <p>The last two keys are optional and dont need to be in the manifest, they are used for backwards compatibility but are not needed with 1.5.0</p> manifest.json<pre><code>{\n  \"description\": \"\",\n  \"short-description\": \"\"\n}\n</code></pre> Name Description description Used for the description in the store, Deprecated since 1.5.0 short-description Used for the description in the preview, Deprecated since 1.5.0"},{"location":"plugin_dev/plugin_template/overview/","title":"Overview","text":"<p>The plugin template is the base of all plugins containing their basic structure. Download</p> <p></p>"},{"location":"plugin_dev/plugin_template/overview/#important-files","title":"Important files","text":"<p>The most important files are:</p> <ul> <li><code>main.py</code></li> <li><code>manifest.json</code></li> <li><code>attribution.json</code></li> <li><code>SimpleAction.py</code></li> </ul>"},{"location":"plugin_dev/submitting/attribution/","title":"Attribution","text":"<p>All plugins must have a <code>attribution.json</code> file in the root directory. It contains information for the store, such as the license and copyright.</p> <p><pre><code>{\n    \"generic\": {\n        \"copyright\": \"\",\n        \"original-url\": \"\",\n        \"license\": \"\",\n        \"license-url\": \"\",\n        \"description\": \"\"\n    }\n}\n</code></pre> The <code>generic</code> key contains information about the plugin. If you want to add attribution to images, fonts, etc. you can add them via their relative path, for example:</p> <pre><code>{\n    \"assets/icon.png\": {\n        \"copyright\": \"\",\n        \"original-url\": \"\",\n        \"license\": \"\",\n        \"license-url\": \"\",\n        \"description\": \"\"\n    }\n}\n</code></pre> <p>Info</p> <p>At the moment not all given attribution files are shown to the user. This will change in future versions</p>"},{"location":"plugin_dev/submitting/attribution/#attributes","title":"Attributes","text":"Name Description <code>copyright</code> The copyright of the plugin. <code>original-url</code> The original url of the plugin. <code>license</code> The license of the plugin. <code>license-url</code> The license url of the plugin. <code>description</code> The description of the license. This is useful if you want to list made modifications"},{"location":"plugin_dev/submitting/manifest/","title":"Manifest","text":"<p>All plugins must have a <code>manifest.json</code> file in the root directory. It contains information for the store, such as the name, version and thumbnail of your plugin.</p> <p>Please head over to manifest.json for more information.</p>"},{"location":"plugin_dev/submitting/submitting/","title":"Submitting","text":"<p>If you finished developing your plugin, you can submit it to the StreamController store by following these steps:</p>"},{"location":"plugin_dev/submitting/submitting/#1-test-your-plugin","title":"1. Test your plugin","text":"<p>Test your plugin for any issues. Also read the Page Caching section and check if your plugin works correctly if the user changes pages.</p>"},{"location":"plugin_dev/submitting/submitting/#2-verify-requirements","title":"2. Verify requirements","text":"<p>Verify that all front-end/normal requirements of your plugin are found in <code>requirements.txt</code>.</p>"},{"location":"plugin_dev/submitting/submitting/#3-add-your-plugin-to-github","title":"3. Add your plugin to GitHub","text":"<p>In order to submit you plugin you have to publish your local repository to GitHub. If you have never used GitHub before, you can follow this tutorial.</p>"},{"location":"plugin_dev/submitting/submitting/#4-fork-the-store","title":"4. Fork the Store","text":"<p>Fork the Store repository into your own account.</p>"},{"location":"plugin_dev/submitting/submitting/#5-add-your-plugin-to-pluginsjson","title":"5. Add your plugin to <code>Plugins.json</code>","text":"<p>Add an entry in <code>Plugins.json</code>: Plugins.json<pre><code>{\n    \"url\": \"https://github.com/your-user-name/your-repo-name\",\n    \"commits\": {\n        \"1.1.1-alpha\": \"your-commit-hash\"\n    }\n}\n</code></pre></p> <p>Versions</p> <p>Make sure to use the app version you used to develop and test your plugin. App versions are in the format <code>breaking.feature.fix</code>. StreamController will use the latest commit of your plugin with matching <code>breaking</code> version.</p>"},{"location":"plugin_dev/submitting/submitting/#6-open-a-pull-request","title":"6. Open a pull request","text":"<p>Open a pull request to the Store repository. Creating a pull request</p>"},{"location":"plugin_dev/submitting/submitting/#7-wait-for-approval","title":"7. Wait for approval","text":"<p>Wait for your pull request to be approved. This usually takes a couple of hours.</p>"},{"location":"plugin_dev/submitting/terms/","title":"Terms and Conditions","text":"<p>By submitting your plugin, icon, or wallpaper (hereinafter referred to as \"content\") to the Core447 Store (hereinafter referred to as the \"Store\"), you agree to the following terms:</p>"},{"location":"plugin_dev/submitting/terms/#1-ownership-and-permissions","title":"1. Ownership and Permissions:","text":"<ul> <li>You confirm that you are the original creator of the content, or you have obtained explicit permission from the original creator or copyright holder to submit and distribute the content through the Store.</li> <li>If the content incorporates elements created by third parties, you guarantee that you have obtained all necessary licenses, rights, consents, and permissions to use and submit such elements.</li> </ul>"},{"location":"plugin_dev/submitting/terms/#2-responsibility-for-content","title":"2. Responsibility for Content:","text":"<ul> <li>You acknowledge and agree that, as the submitter, you bear full responsibility for the content you upload to the Store.</li> <li>This includes, but is not limited to, ensuring that the content does not infringe on any intellectual property rights, copyrights, trademarks, or any other rights of third parties.</li> </ul>"},{"location":"plugin_dev/submitting/terms/#3-liability-for-claims","title":"3. Liability for Claims:","text":"<ul> <li>You agree to indemnify, defend, and hold harmless Core447, his affiliates and other contributors of StreamController from any claims, liabilities, damages, losses, and expenses, including without limitation reasonable legal and accounting fees, arising out of or in any way connected with your content, your use of the Store, or your violation of these terms.</li> </ul>"},{"location":"plugin_dev/submitting/terms/#4-core447s-efforts-and-liability","title":"4. Core447's Efforts and Liability:","text":"<ul> <li>Core447 strives to prevent the submission of content that violates these terms by implementing review processes. However, you acknowledge that it is possible for inappropriate or infringing content to slip through despite these efforts.</li> <li>Core447 shall not be held responsible or liable for any content submitted by you or any third party. Core447 does not assume any responsibility for continuously monitoring the Store for inappropriate or infringing content.</li> <li>Core447 reserves the right, to remove any content that violates these terms or is otherwise objectionable.</li> </ul>"},{"location":"plugin_dev/submitting/terms/#5-compliance-with-laws","title":"5. Compliance with Laws:","text":"<ul> <li>You affirm that your submission and use of the content comply with all applicable laws, regulations, and guidelines, including but not limited to copyright and intellectual property laws.</li> </ul>"},{"location":"plugin_dev/submitting/terms/#6-modification-and-termination","title":"6. Modification and Termination:","text":"<ul> <li>Core447 reserves the right to modify or terminate the submission process or the Store at any time, with or without notice. Core447 may also update these terms from time to time, and you agree to be bound by the updated terms upon continued use of the Store.</li> </ul> <p>By submitting content to the Store, you acknowledge that you have read, understood, and agree to be bound by these terms.</p>"},{"location":"privacy/","title":"Privacy Policy","text":"<p>This wiki is hosted on Github Pages.</p> <p>Please refer to the official privacy policies of Github for more information:</p> <ul> <li>https://docs.github.com/en/site-policy/privacy-policies/github-general-privacy-statement</li> <li>https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages#data-collection</li> </ul>"},{"location":"privacy/#contact-me","title":"Contact Me","text":"<p>You can contact me via:</p> <ul> <li>core447@proton.me</li> </ul>"},{"location":"privacy/#cookies","title":"Cookies","text":"<p>Change cookie settings</p>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/info/","title":"Info","text":""}]}