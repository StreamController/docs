{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to StreamController","text":"<p>Thank you for your interest in this app, it is a lot of work developing it.</p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#github","title":"GitHub:","text":"<p>This is currently the only way to install StreamController, because it is still in heavy development.     1. Clone StreamController from GitHub by typing:         <pre><code>git clone https://github.com/Core447/StreamController\n</code></pre>     2. Enter the <code>StreamController</code> directory:         <pre><code>cd StreamController\n</code></pre>     3. Create a virtual environment:         <pre><code>python -m venv .venv\n</code></pre>     4. Activate the virtual environment:         <pre><code>source .venv/bin/activate\n</code></pre>     5. Install pip requirements:         <pre><code>pip install -r requirements.txt\n</code></pre>     6. Launch the app:         <pre><code>python3 main.py\n</code></pre></p>"},{"location":"#flathub","title":"Flathub:","text":"<p>Coming soon !!!</p>"},{"location":"plugin_dev/getting_started/","title":"Getting Started","text":"<p>To get the most out of StreamController you can easily create your own plugin.</p> <p>And the best of it is that there are just four major steps to get started with developing your own plugin:</p> <ol> <li>Come up with an idea</li> <li>Download StreamController's source code</li> <li>Fork the plugin template (coming soon) </li> <li>Modify the template</li> <li>Submit your plugin to the Store</li> </ol> <p>Ok, ok, that was probably a bit too quick, so let's take a closer look at the process in the next sections.</p>"},{"location":"plugin_dev/idea/","title":"1. The Idea","text":"<p>The first but hardest step. Your presence here suggests that you might already have a brilliant concept for a plugin percolating in your mind.</p> <p>If not, I encourage you to reflect on any challenges or reccurent tasks you encounter while using your computer. Consider what could be improved or streamlined within your workflow. These pain points often serve as the perfect springboard for innovative plugin ideas that not only benefit you but also have the potential to assist others with similar needs.</p> <p>You might also wannt to look at the Elgato Marketplace to see if there are any plugins you would like to see on StreamController.</p>"},{"location":"plugin_dev/idea/#suggestions","title":"Suggestions","text":"<p>If you really struggle to find an idea, here's my list of plugins I would really like to see:</p> <ul> <li> Speedtest</li> <li> Gnome Window Control (move windows on Gnome)</li> <li> Discord integration</li> <li> Weather</li> <li> Clock</li> </ul> <p>Feel free to use any of these suggestions without giving any credit.</p>"},{"location":"plugin_dev/intro/","title":"Plugin Development","text":"<p>Understanding that no single application can cater to the unique needs and preferences of every individual, I've empowered users to tailor their experience by developing their own plugins. This customization ensures that the functionality of the application aligns perfectly with their requirements.</p> <p>StreamController features enhanced plugin support, enabling developers like you to easily create plugins using Python. The choice of Python as the core language for StreamController wasn't arbitrary; it was selected for its simplicity and ease of learning, making it an ideal choice for plugin development.</p>"},{"location":"plugin_dev/intro/#official-plugins","title":"Official Plugins","text":"<p>StreamController is complemented by a suite of official plugins designed to enhance your experience:</p> <ul> <li>OBS Plugin to control OBS</li> <li>Media Plugin to control playing audio and video content</li> <li>Deck Plugin to control your StreamDeck on a new level</li> <li>OS Plugin to control your OS</li> </ul>"},{"location":"plugin_dev/intro/#no-streamdeck","title":"No StreamDeck?","text":"<p>No problem, just use a FakeDeck!</p> <p>FakeDecks are emulated original StreamDecks for testing purposes. Therefore you can use them to test and develop plugins without any real StreamDeck.</p>"},{"location":"plugin_dev/intro/#enable-fakedecks","title":"Enable FakeDecks","text":"<ol> <li>Open Settings</li> <li>Go to Developer Settings</li> <li>Increase the number of FakeDecks (max 3)</li> <li>If you change from 0 to 1..3 please restart the app (This will not be needed in future versions)</li> </ol>"},{"location":"plugin_dev/plugin_template/","title":"Overview","text":"<p>The plugin template is the base of all plugins containing their basic structure.</p> <p></p>"},{"location":"plugin_dev/plugin_template/#important-files","title":"Important files","text":"<p>The most important files are:</p> <ul> <li><code>main.py</code></li> <li><code>manifest.json</code></li> <li><code>attribution.json</code></li> <li><code>BackendAction.py</code></li> </ul>"},{"location":"plugin_dev/setup/","title":"2. Setting Up Your Environment","text":"<p>After you have come up with an Idea, all you have to do is put it into practice.   To develop StreamController plugins you need the source code of StreamController itself. This allows you to deeply integrate your plugin into the application.</p> <p>Note: Should your plugin require modification of the code of StreamController, you will need to open a pull request. Just make sure that all requested changes outside of your plugin are generic ones and not specific to your plugin.   1. Clone StreamController from GitHub by typing:</p> <p><pre><code>git clone https://github.com/Core447/StreamController\n</code></pre> 2. Enter the <code>StreamController</code> directory:</p> <p><pre><code>cd StreamController\n</code></pre> 3. Create a virtual environment:</p> <p><pre><code>python -m venv .venv\n</code></pre> 4. Activate the virtual environment:</p> <p><pre><code>source .venv/bin/activate\n</code></pre> 5. Install pip requirements:</p> <p><pre><code>pip install -r requirements.txt\n</code></pre> 6 Enter the plugins directory:</p> <p><pre><code>cd plugins\n</code></pre> 7. Clone the PluginTemplate from GitHub by typing:</p> <pre><code>git clone https://github.com/Core447/PluginTemplate\n</code></pre> <p>This will create a new directory called <code>PluginTemplate</code> in the plugins directory with a bunch of files. But no worry, I will explain each of them in the next section.</p>"},{"location":"plugin_dev/plugin_template/main/","title":"main.py","text":"<p>Main</p>"}]}